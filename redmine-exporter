#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Like Ma <likemartinma@gmail.com>
# vim: set ts=4 sw=4 sts=4 et:

import json
import os.path
import re
import mimetypes
from argparse import ArgumentParser
from os import environb, system, linesep, unlink
from io import StringIO, BytesIO
from sys import stderr
from urllib.parse import urlparse, urlunparse
from base64 import b64encode

import requests
from redminelib import Redmine
from bs4 import BeautifulSoup
from lxml import etree as ET


DOCBOOK_TPL = b'''
<article xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xinclude="http://www.w3.org/2001/XInclude"
         version="5.0"
         xml:lang="zh">
  <info>
    <title></title>
  </info>
</article>
'''

SVG_FNAME_RE = re.compile(r"'([^']+\.svg)'")
VIEWER_WARNING_RE = re.compile(r'Viewer does not support full SVG .*')


def default_conf():
    return os.path.join(get_env('HOME'), '.redmine-exporter.conf')


def get_env(name):
    v = environb.get(name.encode())
    return v.decode('utf-8') if v else None


def wiki_fname(wiki, ext):
    return '%s.%s' % (i.replace(' ', '_'), ext)


def parse_args():
    parser = ArgumentParser('redmine-exporter')
    parser.add_argument('-t', '--type',
                        choices=('textile', 'html', 'pdf', 'docbook'),
                        default='textile',
                        help='Export format type')

    parser.add_argument('-u', '--redmine-url',
                        default=get_env('REDMINE_URL'),
                        help='Remine access key')

    parser.add_argument('-k', '--redmine-key',
                        default=get_env('REDMINE_KEY'),
                        help='Remine access key')

    parser.add_argument('-p', '--project',
                        default=get_env('REDMINE_PROJECT'),
                        help='Remine project id or name')

    parser.add_argument('--css',
                        default=get_env('REDMINE_CSS'),
                        help='Replace html style tag by css file.')

    parser.add_argument('--embed-images', action='store_true',
                        help='Base64 encode images into html.')

    parser.add_argument('--convert-svg', choices=('png', 'jpg', 'gif'),
                        help=('Convert SVG to other image format by '
                              'ImageMagick convert.'))

    parser.add_argument('--convert-svg-opts',
                        help='ImageMagick convert command line options')

    parser.add_argument('--toc', action='store_true',
                        help='Enable html or wiki table of content')

    parser.add_argument('-f', '--file', default=default_conf(),
                        help=('Specify configure, '
                              'default ~/.redmine_exporter.conf'))

    parser.add_argument('-o', '--output', default='.',
                        help='Output directory')

    parser.add_argument('--title', help='Specify title')

    parser.add_argument('--docbook-tpl',
                        default=get_env('REDMINE_DOCBOOK_TPL'),
                        help='Specify docbook template')

    parser.add_argument('--pandoc', default=get_env('REDMINE_PANDOC_OPTS'),
                        help='pandoc cli options for generating docbook')

    parser.add_argument('wiki', nargs='+', help='wiki name')

    args = parser.parse_args()
    if args.file and os.path.isfile(args.file):
        try:
            conf = json.load(open(args.file))
            if not args.redmine_url:
                args.redmine_url = conf.get('redmine_url')

            if not args.redmine_key:
                args.redmine_key = conf.get('redmine_key')

            if not args.project:
                args.project = conf.get('project')

            if not args.css:
                args.css = conf.get('css')

            if not args.docbook_tpl:
                args.docbook_tpl = conf.get('docbook_tpl')

            if not args.convert_svg_opts:
                args.convert_svg_opts = conf.get('convert_svg_opts')
        except Exception as e:
            print('Failed to load %s, %s' % (args.file, e), file=stderr)

    d = vars(args)
    for i in ('redmine_url', 'redmine_key', 'project'):
        if not d[i]:
            raise ValueError('Invalid value of --%s' % (i.replace('_', '-')))

    return args


def export_textile(page, wiki, args):
    # convert to native line separator.
    text = page.text.replace('\r\n', linesep)

    fname = os.path.join(args.output, wiki_fname(wiki, 'wiki'))
    with open(fname, 'w') as fp:
        title, toc = args.title, args.toc
        if title or not toc:
            for i in StringIO(text):
                s = i.strip()
                if not toc and s == '{{>toc}}':
                    i = '\n'
                    toc = True
                elif title and s.startswith('h1. '):
                    i = 'h1 %s\n' % title
                    title = None

                fp.write(i)
        else:
            fp.write(text)

    return fname


def export_html(page, wiki, args):
    page.export('html', savepath=args.output)
    html = os.path.join(args.output, wiki_fname(wiki, 'html'))

    # Use html5lib instead of html.parser, because the latter will lowercase
    # SVG tag foreignObject
    soup = BeautifulSoup(open(html), features='html5lib')

    if args.css:
        tag = soup.html.head.style
        tag.clear()
        tag.append(open(args.css).read())

    if args.title:
        tag = soup.html.head.title
        tag.clear()
        tag.append(args.title)

        tag = soup.html.body.h1
        tag.clear()
        tag.append(args.title)

    if not args.toc:
        ul = soup.select_one('ul.toc')
        if ul:
            ul.decompose()

    for i in soup.select('img'):
        i['src'] = export_image(i['src'], args)

    for i in soup.select('span.drawioDiagram'):
        v = i['ondblclick']
        if "find('svg')" in v:
            m = SVG_FNAME_RE.search(v)
            i.parent.append(
                soup.new_tag('img', src=export_svg(
                    m.group(1), i.select_one('svg'), args)))
            i.decompose()

    open(html, 'w').write(
        soup.prettify(formatter=lambda x: x.replace('Â¶', '')))

    strip_tags(html, 'code')


def base64_image(path, content):
    mime, _ = mimetypes.guess_type(path)
    if mime:
        data = b64encode(content).decode('ascii')
        return 'data:%s;base64,%s' % (mime, data)

    print('WARN: unable to guess mime type of %s' % path, file=stderr)


def export_image(src, args):
    u = urlparse(args.redmine_url)._replace(path=src)
    res = requests.get(urlunparse(u),
                       headers={'X-Redmine-API-Key': args.redmine_key})

    res.raise_for_status()
    if args.embed_images:
        return base64_image(u.path, res.content)

    fname = os.path.basename(u.path)
    with open(fname, 'wb') as fp:
        fp.write(res.content)

    return fname


def export_svg(fname, svg, args):
    # Remove warning text tag by draw.io
    tag = svg.find('text', text='Viewer does not support full SVG 1.1')
    if tag:
        tag.parent.decompose()

    content = str(svg).encode('UTF-8')
    if args.convert_svg:
        out = '.'.join((os.path.splitext(fname)[0], args.convert_svg))
        with open(fname, 'wb') as fp:
            fp.write(content)

        opts = args.convert_svg_opts if args.convert_svg_opts else ''
        system('convert %s %s %s' % (opts, fname, out))
        unlink(fname)
        if not args.embed_images:
            return out

        content = open(out, 'rb').read()
        unlink(out)
        fname = out

    if args.embed_images:
        return base64_image(fname, content)

    with open(fname, 'wb') as fp:
        fp.write(content)

    return fname


def xml_parse_ns(fname):
    return {elem[0]: elem[1] for evt, elem in ET.iterparse(fname, ['start-ns'])
            if evt == 'start-ns'}


def strip_tags(fname, tag):
    tag_checker = re.compile(r'<%s[^>]*>' % tag)
    text = open(fname).read()
    text = re.sub(tag_checker, '', text.replace('</%s>' % tag, ''))
    open(fname, "w").write(text)


def docbook_template(args):
    return args.docbook_tpl if args.docbook_tpl else BytesIO(DOCBOOK_TPL)


def export_docbook(page, wiki, args):
    textile = export_textile(page, wiki, args)

    # literallayout can not be rendered properly in pdf.
    strip_tags(textile, 'code')

    docbook = os.path.join(args.output, wiki_fname(wiki, 'xml'))
    system('pandoc %s -f textile -t docbook -o "%s" "%s"' %
           (args.pandoc if args.pandoc else '', docbook, textile))

    ns = xml_parse_ns(docbook_template(args))

    parser = ET.XMLParser(recover=True)
    article = ET.parse(docbook_template(args), parser=parser)
    article_root = article.getroot()

    ns['docbook'] = ns['']
    title = article_root.find(
        'docbook:info/docbook:title', ns)

    tree = ET.parse(docbook, parser=parser)
    root = tree.getroot()

    title.text = args.title if args.title else root.find('./title').text
    for i in root.findall('./section'):
        article_root.append(i)

    article.write(docbook, encoding='UTF-8', xml_declaration=True)

    # literallayout can not be rendered properly in pdf.
    strip_tags(docbook, 'literallayout')


def export(redmine, wiki, args):
    page = redmine.wiki_page.get(wiki, project_id=args.project)
    if args.type == 'textile':
        export_textile(page, wiki, args)
    elif args.type == 'pdf':
        page.export('pdf', savepath=args.output)
    elif args.type == 'html':
        export_html(page, wiki, args)
    elif args.type == 'docbook':
        export_docbook(page, wiki, args)


args = parse_args()
redmine = Redmine(args.redmine_url, key=args.redmine_key)
for i in args.wiki:
    export(redmine, i, args)
